<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General Variables
difficulty = global.playerscore;

//Makes random different every time
randomize();

//First/Second car you click
flipped_1 = -1;
flipped_2 = -1;
//Holds the Index of the card you click until
//driver can process it
temp_card = -1;

//Total number of cards
cards_left = 4 + 2 * floor(global.playerscore / 2);

//Holds all of the cards
cards = 0;

can_flip = true;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creates The Cards

//Highest card value
max_val = cards_left / 2;
//Leftover pairs
repeats = 0;

if(max_val &gt; 10){
    repeats = max_val - 10;
    max_val = 10;
}

//Array with frequency of each values to be used 
//ex: 4 twos left to play
card_vals = 0;
//Array with the value correspon ding to the frequency array
//card_vals = 4, card_val_ind = 2 = 4 twos left to play
card_val_ind = 0;

for(e = 1; e &lt;= max_val; e ++){
    card_vals[e] = 2;
    card_val_ind[e] = e;
}
while(repeats &gt; 0){
    for(e = 1; e &lt;= max_val; e ++){
        card_vals[e] += 2; 
        repeats --;
        if(repeats == 0){
            break;
        }
    }
}
card_vals_size = 0;
show_debug_message(""+string(card_vals));
//irandom(x) goes 0-x inclusive
//irandom_range(x,y) goes x-y inclusive

card_index = -1;

for(y_pos = 96; y_pos &lt;= 96 + 64 * (cards_left / 10); y_pos += 64){
    for(x_pos = 32; x_pos &lt;= 32 + 64 * 9; x_pos += 64){
        card_index ++;
        if(card_index &gt;= cards_left){
            break;
        }
        cards[card_index] = instance_create(x_pos, y_pos, obj_card);
        cards[card_index].card_pos = card_index;
        while(true){
            temp_val = irandom_range(1,max_val);
            if(card_vals[temp_val] &gt; 0){
                card_vals[temp_val] --;
                cards[card_index].value = card_val_ind[temp_val];
                if(card_vals[temp_val] == 0){
                    for(e = temp_val; e &lt; max_val; e ++){
                        card_vals[e] = card_vals[e+1];
                        card_val_ind[e] = card_val_ind[e+1];
                    }
                    max_val --;
                }
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Timer Settings

times = 60
alarm[1] = room_speed;
alarm[2] = room_speed * 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>Game over!</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>rm_Lobby</room>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset Alarm
alarm[1] = room_speed;
times --;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Card Comparisons

//flipped_1 and flipped_2 is the index in cards where
//the flipped cards are

//If both cards have the same value (match)
if(cards[flipped_1].value == cards[flipped_2].value){
    //destroy both cards
    with(cards[flipped_1]){
        instance_destroy();
    }
    with(cards[flipped_2]){
        instance_destroy();
    }
    //2 less cards remain
    cards_left -= 2;
    //-1 = default value with not attached to a card
    flipped_1 = -1;
    flipped_2 = -1;
    
    //To be implemented
    if(cards_left == 0){
        show_message("You Win!");
        global.playerscore += 3;
        room_goto(rm_Lobby);
        
    }
}
//Not a match
else{
    //Make both cards not flipped and reset their sprit image
    //to the hidden value one
    cards[flipped_1].flipped = false;
    cards[flipped_1].image_index = 0;
    cards[flipped_2].flipped = false;
    cards[flipped_2].image_index = 0;
    flipped_1 = -1;
    flipped_2 = -1;
}

can_flip = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing cards


//If no other card is currently flipped
if(flipped_1 == -1){
    //Make flipped_1 = the index of cards
    //for the card that was clicked
    //temp_card is given value in the obj_card Left Pressed event
    flipped_1 = temp_card;
}
//If another card is also flipped
else if(flipped_2 == -1){
    flipped_2 = temp_card;
    //Set a delay before comparing cards in the alarm[1] event
    //room_speed * .5 = .5 seconds
    alarm[0] = room_speed * .5;
    can_flip = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI

//Score/Difficulty
draw_text(16, 24, "Score: " +string(global.playerscore));

//Bullets Left
draw_text(260, 24, "Cards Left: " +string(cards_left));

//Time Left
draw_text(540, 24, "Time: " +string(times));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
